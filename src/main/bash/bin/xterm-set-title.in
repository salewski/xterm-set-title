#!@BASH_SH@ -
# SPDX-License-Identifier: GPL-2.0-or-later

# @configure_input@
#
# Copyright (c) 2018, 2020 Alan D. Salewski <salewski@att.net>
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software Foundation,
#     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,, USA.

#
# xterm-set-title: Allows easy setting of the xterm(1) window title from the
# command line (or from other programs).
#

declare -r PROG='xterm-set-title'

# Comma-space-separated list
declare -r COPYRIGHT_DATES='2018, 2020'

# Filtered-in at build time; has the form (without the quotes):
#     "Person Name <email@example.com"
declare -r MAINTAINER='@DFLT_MAINTAINER_FULL@'

# This variable is replaced by the current xterm-set-title project version
# number at build time.
declare -r VERSION='@VERSION@'

# This variable is replaced at build time
declare -r gl_const_build_date='@BUILD_DATE@'
declare -r gl_const_release="${VERSION}  (built: ${gl_const_build_date})"


# By default we'll use the external programs found at configure-time (values
# are filtered-in here at build time). But we allow the user to override any
# particular tool by setting an environment variable named after the tool
# (with hyphen chars changed to underscores).

CAT_PROG="${CAT:-@CAT@}"


# Note that we use an "application" $TRACING flag separate from bash's
# built-in 'xtrace' (set -x) shell option. This allows us to have a general
# notion of user-requested verbosity separate from any selectively placed
# 'set -x/set +x' sections we may plug into the code while working on the
# program itself; similarly for places where we might want to avoid trace
# output while debugging by selectively placing 'set +x/set -x' sections; both
# of those behaviors would be much more cumbersome to achieve if we just
# checked for 'x' in $- at runtime.
#
BE_VERBOSE=false   # enable with one '-v' (--verbose) opt
DEBUGGING=false    # enable with two '-v' (--verbose) opts
TRACING=false      # enable with three or more '-v' (--verbose) opts


# Note that we export the cleanup hook function definitions, but not the
# ${F_CLEANUP_HOOK_NAMES} array. We'll create a separate copy of that in any
# subshell that needs to register its own cleanup hooks.
#
declare -a F_CLEANUP_HOOK_NAMES=()

function f_add_cleanup_hook_name () {

    : $PROG \(trace: $LINENO\): ${FUNCNAME}\(\): entered

    F_CLEANUP_HOOK_NAMES+=( $1 );
}
export -f f_add_cleanup_hook_name


function f_cleanup () {

    : $PROG \(trace: $LINENO\): ${FUNCNAME}\(\): entered

    if test ${#F_CLEANUP_HOOK_NAMES[@]} -eq 0; then
        : $PROG \(trace: $LINENO\): ${FUNCNAME}\(\): No cleanup hooks, so nothing to do
        return
    fi

    local __t_cleanup_hook
    local __t_idx

    let __t_idx=${#F_CLEANUP_HOOK_NAMES[@]}-1

    # Note that we're running the cleanup hooks in opposite order from which
    # they were installed.
    #
    while test ${__t_idx} -ge 0; do

        __t_cleanup_hook=${F_CLEANUP_HOOK_NAMES[${__t_idx}]}

        if $DEBUGGING; then
            printf "${PROG} (info): running cleanup hook: [%s]\n" "${__t_cleanup_hook}" 1>&2
        fi

        test -n "${__t_cleanup_hook}" && eval "${__t_cleanup_hook}"

        let __t_idx=${__t_idx}-1
    done
}
export -f f_cleanup

function f_cleanup_and_die () {
    : $PROG \(trace: $LINENO\): ${FUNCNAME}\(\): entered
    f_cleanup
    exit 1
}
export -f f_cleanup_and_die

trap 'printf "$PROG (warn): HUP signal caught; bailing out\n"  1>&2; f_cleanup_and_die' HUP
trap 'printf "$PROG (warn): INT signal caught; bailing out\n"  1>&2; f_cleanup_and_die' INT
trap 'printf "$PROG (warn): QUIT signal caught; bailing out\n" 1>&2; f_cleanup_and_die' QUIT
trap 'printf "$PROG (warn): TERM signal caught; bailing out\n" 1>&2; f_cleanup_and_die' TERM

trap 'f_cleanup' EXIT


f_print_help () {

    "${CAT_PROG}" <<EOF
usage: $PROG [OPTION...] <NEW_TITLE>
       $PROG [-h|--help]
       $PROG [-v|--version]
Emits NEW_TITLE surrounded by escape characters to set the xterm(1) window title.

  -h, --help      Print this help message on stdout
  -V, --version   Print the version of the program on stdout
  -v, --verbose   Tell what is being done. Two or more -v options turns on tracing (set -x)

      --          Signals the end of options and disables further options processing. All
                    remaining arguments will be ignored

Report bugs to ${MAINTAINER}
EOF
}

f_print_version () {
    "${CAT_PROG}" <<EOF
${PROG} ${gl_const_release}
Copyright (C) ${COPYRIGHT_DATES} Alan D. Salewski
License GPLv2+: GNU GPL version 2 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Alan D. Salewski.
EOF
}


# main of program starts here

pos_last_plus_one=$(( $# + 1 ))

# Each value is one or zero, which indicates whether or not the option is
# expected to have an argument.
#
declare -A longopt_spec=(
    ['help']=0      # -h, --help
    ['version']=0   # -V, --version

    ['verbose']=0   # -v, --verbose
)

# internal sanity check
for one_key in "${!longopt_spec[@]}"; do
    one_val=${longopt_spec[${one_key}]}
    if [[ $one_val =~ ^[01]$ ]]; then :; else
        printf "${PROG} (BUG) [line $LINENO]: value (%s) for longopt key '%s' must be either 0 or 1; bailing out\n" \
               "${one_val}" "${one_key}" 1>&2
        exit 1
    fi
done

if test $# -gt 0; then

    # Using getopts in "silent mode". Note that adding '-' to the optstring
    # allows us to process GNU-style long-form options; that option is
    # specified to take an argument to cause getopts to place whatever follows
    # the second '-' character into OPTARG.
    #
    # Note that getopts will automatically stop processsing options upon
    # encountering '--', but we still need to deal with the pathological form
    # --=BLAH (no option name, just a value using the equals-sign syntax).
    #
    while builtin getopts ':-:hVv' opt
    do
        : $PROG \(trace: $LINENO\):    opt is: $opt
        : $PROG \(trace: $LINENO\): OPTARG is: $OPTARG

        # cosmetic: for log/error messages
        t_pfx='-'  # assume short-form option

        if test "${opt}" = '-'; then

            # Intercepting processing of long-form option. This conditional
            # block will set up the 'opt', 'OPTARG', and 'OPTIND' variables
            # for the code that follows, just as if getopts had the capability
            # to process long-form options.

            t_pfx='--'

            # OPTARG here is one of:
            #
            #     =BLAH    (which means user specified '--=BLAH')
            # or:
            #     foo
            # or:
            #     foo=FOOVAL

            if [[ ${OPTARG} =~ .*=.* ]]; then

                : $PROG \(trace: $LINENO\): OPTARG is name=value style

                # Keep everything up to the first '=' sign. Note that if the
                # option was specified as: --foo=FOOVAL, then $opt here will
                # be 'foo' (no hyphen chars).
                opt=${OPTARG/=*/}
                : $PROG \(trace: $LINENO\): opt is: $opt

                : $PROG \(trace: $LINENO\): a long option name must be at least two characters in length
                if test ${#opt} -le 1; then
                    printf "${PROG} (error): invalid long option '%s%s'; bailing out\n" "${t_pfx}" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                t_exists=false
                for one_key in "${!longopt_spec[@]}"; do
                    if test "${opt}" = "${one_key}"; then
                        t_exists=true
                        break
                    fi
                done

                if $t_exists; then :; else
                    # Unrecognized option; note that we need to restore the
                    # leading '-' chars that getopts has sliced off.
                    #
                    printf "${PROG} (error): unrecognized long option '%s%s'; bailing out\n" "${t_pfx}" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                # Since we know the option was specified in --foo=BAR form,
                # the option was specified erroneously unless the option's
                # long-form spec indicates that it can accept an argument.
                #
                if test ${longopt_spec[${opt}]} -ne 1; then
                    printf "${PROG} (error): option '%s%s' does not take an argument; bailing out\n" "${t_pfx}" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                OPTARG=${OPTARG#*=}  # keep everything after the first '=' sign
                : $PROG \(trace: $LINENO\): OPTARG is: $OPTARG

            else
                : $PROG \(trace: $LINENO\): OPTARG is name-only style

                opt="$OPTARG"
                : $PROG \(trace: $LINENO\): opt is: $opt

                if test -z "${opt}"; then

                    # This should be a "can't happen" scenario; since bash's
                    # 'getopts' implementation should directly handle the
                    # magic '--' token, we should never fall through here.

                    printf "${PROG} (BUG) [line $LINENO]: received empty OPTARG, which means getopts did not handle the stand-alone '--' token; bailing out\n" 1>&2
                    exit 1
                fi

                : $PROG \(trace: $LINENO\): a non-empty long option name must be at least two characters in length
                if test ${#opt} -lt 2; then
                    printf "${PROG} (error): invalid long option '%s%s'; bailing out\n" "${t_pfx}" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                t_exists=false
                for one_key in "${!longopt_spec[@]}"; do
                    if test "${opt}" = "${one_key}"; then
                        t_exists=true
                        break
                    fi
                done

                if $t_exists; then :; else

                    # Unrecognized option; note that we need to restore the
                    # leading '-' chars that getopts has sliced off.
                    #
                    printf "${PROG} (error): unrecognized long option '%s%s'; bailing out\n" "${t_pfx}" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                # We know the option was specified in one of the following forms:
                #
                #     --foo
                # or:
                #     --foo FOOVAL
                #
                # The option's long-form spec will tell us whether or not an argument is
                # expected for the option.
                #
                if test ${longopt_spec[${opt}]} -eq 1; then

                    # If bumping OPTIND would put us more than one beyond the "last pos
                    # plus one", then there is no argument provided at position OPTIND for
                    # us to consume.
                    #
                    if (( $(( $OPTIND + 1 )) > pos_last_plus_one )); then

                        printf "${PROG} (error): missing argument for option '%s%s'\n" "${t_pfx}" "${opt}" 1>&2
                        f_print_help 1>&2
                        exit 1
                    fi

                    OPTARG=${@:${OPTIND}:1}
                    (( ++OPTIND ))
                    : $PROG \(trace: $LINENO\): manually incremented OPTIND to: $OPTIND
                fi
            fi
        fi

        # Normal getopts style processing happens beneath here, with the
        # slight twist that 'opt' may contain a long-form option name.

        case $opt in

            'help' | 'h' )
                # print help message
                f_print_help
                exit 0
                ;;

            'version' | 'V' )
                # print program version info
                f_print_version
                exit 0
                ;;


            'verbose' | 'v' )
                # Accumulating 'verbose' opt. A single -v opt simply turns
                # BE_VERBOSE on (enables (additional) info-level
                # messages). Two -v opts turns on $DEBUGGING, which
                # additionally enables debug-level messages. Three or more
                # '-v' opts turns $TRACING on. Note that if you intend to turn
                # tracing on, you'll probably want your -v opts to be the
                # first opts on the command line (so they take effect
                # earlier).
                if $BE_VERBOSE; then

                    if $DEBUGGING; then

                        # We've seen at least two -v opt before, so now we're
                        # turning tracing on.

                        if $TRACING; then
                            : $PROG \(trace: $LINENO\): tracing already enabled
                        else
                            # See comments at the decl spot for $TRACING
                            # pertaining to why we maintain an "application"
                            # $TRACING flag separate from bash's built-in
                            # 'xtrace' (set -x) shell option.

                            # Enable tracking before setting our app-level
                            # $TRACING flag so that setting it is the first
                            # thing that appears in the trace.
                            set -x
                            TRACING=true
                        fi
                    else
                        # Second -v opt we're seeing
                        DEBUGGING=true
                        # Just to give a warm and fuzzy...
                        printf "${PROG} (debug): debug-level output enabled\n" 1>&2
                    fi
                else
                    # First -v opt we're seeing
                    BE_VERBOSE=true
                fi
                ;;


            ':')  # getopts put : in opt
                  printf "${PROG} (error): missing argument for option '%s%s'\n" "$t_pfx" "$OPTARG" 1>&2
                  f_print_help 1>&2
                  exit 1
                  ;;

            '?')  # getopts put ? in opt  (means "unrecognized option")
                  printf "${PROG} (error): unrecognized option '%s%s'; bailing out\n" "$t_pfx" "$OPTARG" 1>&2
                  f_print_help 1>&2
                  exit 1;
                  ;;

            * )   printf "${PROG} (BUG) [line $LINENO]: unhandled option case; opt: '$opt',  OPTARG: '$OPTARG'\n" 1>&2
                  exit 1
                  ;;
        esac
    done
fi

# shift off all arguments already handled
let ii=1;  # shell OPTIND index starts at 1
while (( ii < ${OPTIND} )); do
    shift
    (( ++ii ))
    : $PROG \(trace: $LINENO\): ii is now: $ii
done

# Unless the '--help' option or '--version' option has been specified (either
# of which would have been dealt with immediately upon parsing it above), we
# expect exactly one command line argument, which we will treat as the name to
# use to set the xterm title.

if test $# -eq 0; then
    printf "${PROG} (error): NEW_TITLE not provided; bailing out\n" 1>&2
    f_print_help 1>&2
    exit 1
fi

if test $# -gt 1; then
    printf "${PROG} (error): Only one NEW_TITLE may be provided (got %d); bailing out\n" "$#" 1>&2
    f_print_help 1>&2
    exit 1
fi

new_title=$1

if $BE_VERBOSE; then
    printf "${PROG} (info): setting title to \"%s\"\n" "${new_title}" 1>&2
fi

printf '\033]2;%s\033\' "${new_title}" \
  && exit 0

printf "${PROG} (error): was error while printing terminal title-setting code; bailing out\n" 1>&2
exit 1


#
# ----------------------------------------------------------------------------
# Documentation
#
# The docs are in Perl's POD format, so you can run either the 'perldoc' or
# 'pod2man' programs on this file to produce a man page.
#
# To generate a man page for distribution (in a tarball or RPM, for instance),
# you'll probably want to run pod2man something like this:
#
#     $ pod2man /path/to/this/file \
#               --center='xterm-set-title' \
#               --release='xterm-set-title-0.1.0' \
#               --section='1' \
#               > /outputdir/xterm-set-title.1
#
# To inspect the page formatting, etc., you can pipe the above 'pod2man'
# command to:
#
#     'man -l -'
#
# instead of redirecting the output to a file.
#
# ----------------------------------------------------------------------------

=pod

=head1 NAME

  xterm-set-title - Set xterm(1) window title from the command line


=head1 SYNOPSIS

  xterm-set-title {-h|--help}
  xterm-set-title {-v|--version}

  xterm-set-title [OPTION...] [--] <NEW_TITLE>


=head1 DESCRIPTION

Simple program to set the title of the current L<xterm(1)> (or of a
similarly-behaved terminal emulator).

=head2 Usage

From your shell within an C<xterm(1)> (or work-alike), do this:

    $ xterm-set-title 'My New Title'


=head2 Motivation

There is nothing fancy going on here. The author simply cannot remember the
magic escape sequences that cause C<XTerm> to interpret a given string as a
command to set the window title; C<xterm-set-title> simpy bundles up that
knowledge into an easily reusable package.

As XTerms accumulate on your desktop over time, some may tend to be long-lived
and dedicated to specific tasks. It is useful to give descriptive names to the
more important ones so they can be easily identified in a list (from a window
manager or desktop manager widget, for instance). If you know in advance that
a given XTerm window should have a specific title, then you can provide it on
the L<xterm(1)> command line, via that program's C<-title> option. The
C<xterm-set-title> program makes it easy to assign such names after the fact,
and also to change them repeatedly over time, if needed.


=head1 OPTIONS

Below are the command line options currently accepted by C<xterm-set-title>.

=head2 Option Syntax

Unless the C<-h> (C<--help>) option or the C<-V> (C<--version>) option has
been specified, the C<xterm-set-title> program expects exactly one command
line argument, which will be treated as the value to use as the XTerm title.

If a window title is not provided, the program emits an error message and
exits with a non-zero exit status. Similarly if more than one window title is
provided.

Be sure to quote the window name on the command line if you want to use a
window title that contains spaces and/or other characters that may be
interpretted as metacharacters by your shell.

Both short-form and long-form ("GNU style") options are supported. Options
bundling is supported for the short form opts, so both of the following are
equivalent to enable trace debugging output:

    $ xterm-set-title -v -v -v my-new-title

    $ xterm-set-title -vvv my-new-title

The C<--> pseudo option is supported, and is even required for those corner
cases in which you would want to set the xterm window title to a value that
looks like a command line option (that is, it starts with a leading C<->
character). For example:

    $ xterm-set-title -- --help    # sets window title to "--help"

    $ xterm-set-title -- --        # sets window title to "--"

Of course, it is never wrong to use the C<--> option to separate the new
window title from the command line options, so if used from another program it
might be a good idea to always use it when invoking C<xterm-set-title>.

    $ xterm-set-title -- whatever  # sets window title to "whatever"


=head2 General Options

=over 4

=item --help

Print help usage message


=item -V, --version

Print the version of the program to stdout and then exit.


=item -v, --verbose

Turn on verbose mode. Causes program to emit messages on C<stderr> indicating
what it is doing. The option may be specified multiple times to increase
further the level of verbosity. One C<-v> option enables info-level output;
two such opts enable debug-level output; three or more enable trace-level
output.

Accumulating "verbose" option; tell what is being done. May be specified more
than once; each additional instance of the option enables an additional amount
of ouput on stderr thus:

=over 4

=item * One C<-v> opt produces info-level messages.

=item * Two C<-v> opts enables debug-level messages, too.

=item * Three or more C<-v> options turns on tracing (set -x)

=back


=item --

Signals the end of options and disables further options processing.

See comments above.


=back


=head1 EXAMPLES

Set the title of the current xterm:

    $ xterm-set-title 'My New Title'

Same thing, only more explicitly. This is the form that is preferred when used
in scripts because it clearly distinguishes the intended title from the
command line options:

    $ xterm-set-title -- 'My New Title'

If you want to see the specific escape sequence used to set the title, ask for
trace output (by providing three or more C<-v> options):

    $ xterm-set-title -vvv 'My New Title'


=head1 EXIT STATUS

Exits with zero on success, non-zero on error.


=head1 BUGS

=over 4

=item * This program is a whole lot of ceremony to achieve something so simple

[Author's note: Like all good things, it started off as a one-line shell script ;-)]

=back

If you find any others, please report them as described in the C<BUGS>
file. The project's GitHub issue tracker is located at:

=over 4

L<https://github.com/salewski/xterm-set-title/issues>

=back


=head1 SEE ALSO

=over 4

=item * L<xterm(1)>

=item * L<https://github.com/salewski/xterm-set-title>

=back


=head1 AUTHOR

=over 4

=item Alan D. Salewski  <salewski@att.net>

=back

=cut

# Copyright symbol gets munged by pod2man(1), so we'll fall back on using '(C)'
# Copyright © 2020 Alan D. Salewski

=pod

=head1 COPYLEFT

Copyright (C) 2020 Alan D. Salewski <salewski@att.net>

License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

=cut


# Local Variables:
#     mode: sh
#     eval: (sh-set-shell "bash" t nil)
# End:
